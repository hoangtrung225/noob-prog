#define _XOPEN_SOURCE
#include <unistd.h>
#include <stdio.h>
#include <cs50.h>
#include <string.h>

	int compstr(char string1[30], char string2[30])
	{
		int len1 = strlen(string1), len2 = strlen(string2), result;
		if (len1 != len2) {return 0;}
		for (int i = 0; i < len1; i++)
		{
			if (string1[i] != string2[i])
			{
				result = 0;
				break;
			
			}
			else   result = 1;
		}
		return result;
		
	
	}
	int regestr(int len,int str[],char* strin)
	{
		str[len] = (int)NULL;
		for (int i = 0; i < len; i++)
		{
			strin[i] = str[i];
		}
		return 0;
	}

int main(int argc, char *argv[])
{
	if (argc > 2)
	{
		printf("warn* argument may contain space or special character");
	}
	//get the salt
	char salt[] = {argv[1][0], argv[1][1], (int) NULL};
	//dictionary attack
	FILE* words;
	words = fopen("/usr/share/dict/words","r");
	char* stringin = malloc(15 * sizeof(char));
	char* stringout = malloc(25 * sizeof(char));
	char* out;

	while ((fgets(stringin,15,words) != NULL))
	{
		//kill the new line
		stringin[strlen(stringin)-1] = (int)NULL;
		//convert and compare
		stringout = crypt(stringin,salt);
		int result = compstr(stringout,argv[1]);
		
		if (result == 1)
		{
			printf("%s\n",stringin);
			break;
			
		}
	}
	int* prostr = malloc(15 * sizeof(int));
	for (int i = 0; i < 8; i++)
	{
		for (int j = 32; j < 114; i++)
		{
			prostr[i] = j;
			regestr(i,prostr,stringin);
			stringout = crypt(stringin,salt);
			int result = compstr(stringout,argv[1]);
		
			if (result == 1)
			{
				printf("%s\n",stringin);
				break;
			}
		}
	}
		
	return 0;
	
	
}
	
	

		
